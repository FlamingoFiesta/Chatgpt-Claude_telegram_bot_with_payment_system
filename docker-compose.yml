version: "3"

services:
  mongo:
    container_name: mongo
    image: mongo:latest
    restart: always
    ports:
      - 127.0.0.1:${MONGODB_PORT:-27017}:${MONGODB_PORT:-27017}
    volumes:
      - ${MONGODB_PATH:-./mongodb}:/data/db
    # TODO: add auth

  chatgpt_telegram_bot:
    container_name: chatgpt_telegram_bot
    command: python3 bot/bot.py
    restart: always
    build:
      context: "."
      dockerfile: Dockerfile
    depends_on:
      - mongo
#      - redis #payment

  mongo_express:
    container_name: mongo-express
    image: mongo-express:latest
    restart: always
    ports:
      - 127.0.0.1:${MONGO_EXPRESS_PORT:-8081}:${MONGO_EXPRESS_PORT:-8081}
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=${MONGODB_PORT:-27017}
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=chatgpt_telegram_bot
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME:-username}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD:-password}
    depends_on:
      - mongo
  #delete everything below if not payment system
  flask_app: # Flask application for handling Stripe webhooks
    container_name: flask_stripe_webhook
    build:
      context: "."
      dockerfile: Dockerfile
    ports:
      - "5000:5000" # Map the internal port 5000 to the host
    volumes:
      - .:/code
    command: flask run --host=0.0.0.0 --port=5000
    environment:
      FLASK_APP: flask/flask_app.py
      FLASK_RUN_HOST: 0.0.0.0
    depends_on:
      - mongo
      - redis

  redis:
    container_name: redis
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"